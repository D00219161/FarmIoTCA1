IoT CA1 FARM 
•	Design Doc – Group (20 Marks)
•	Version Control - Group (20 Marks)
•	Hardware – Matthew & Finbar (20 Marks)
•	Data, Data Storage & Processing – Roisin (20 Marks)
•	Security – Finbar (10 Marks)
•	UI, User & Testing – Aisling (20 Marks)


Word doc files will be added to this txt file


Matthew branch test


Aisling branch test

Roisin New branch test - Updated location


<<<<<<< matthew >>>>>>>
Hardware

1.	Hardware
The following hardware parts are required to read data from the electricity live wire:
	X1 Raspberry Pi Zero
	X1 Gravity Analog AC Current Sensor (with Analog Board Module)
	X1 ADS1115 Analog to Digital converter (16bit 4-Channel)
	X7 Male-to-Female jumper wires

Detailed analysis below of the hardware used within the IoT Application explains how the hardware will be setup and how they will communicate to the Pi. The AC Current Sensor (with Analog Board Module) and ADS1115 Converter have already been ordered however with the current situation of COVID delivering goods has been a major issue. I have used Fritzing to digitally connect the hardware up with the Pi as per Figure 0.1. Matthew’s Pi which will be connected to the Mongo Database, will have the listed hardware reading the current usage before sending the log of data usage readiungs to the database. Thus, making the data recorded from Matthew’s hardware accessible to any of the team members despite him only having the hardware within the group.

 
Figure 0.1 Electricity Sensor Hardware Setup

Raspberry Pi Zero
The hardware environment setup for the IoT Application involved a micro-controller, which is the Raspberry Pi Zero powered by mains electricity. The micro-controller is connected to WiFi – being an easier way to connect to the internet rather than running cables of ethernet to the device.

AC Current Sensor
As our IoT Application will be measuring electricity usage within the home, additional hardware has been sourced and ordered such as the Analog AC Current sensor which features a non-invasive “wrap-on” tie to eliminate cutting into the mains wiring. This sensor had a 3.5mm jack socket that was plugged into the analog module.

Analog Board Module
The analog board can communicate with the Raspberry Pi with the GND, power input and signal output connections (these will be used with the male to female wires). It wouldn’t be possible to connect the analog board directly to the Raspberry Pi as it only allows digital input from hardware peripherals, so an ADS1115 converter will be required to convert the analog signals coming from the electricity sensor into digital signals that the Pi would be able to recognise.

ADS1115 Analog to Digital Converter
The analog board will then be connected to the ADS1115 converter using the GND, power input and signal output connections. This hardware can detect the current electricity usage, complete calculations required and send the data to the database.


<<<<<<< aisling
UI, Users and Testing

Homesafe is a UI that helps people such as our primary user, Oliver the farmer. It will be used to help manage their finances through tracking their electricity usage and the temperature of their house on our website. 
What data is available to the user? 
When the user has logged into Homesafe there are two versions of the website. The version you have access to depends on the level of access granted for that specific user. For example, Oliver the farmer has full access to the system as the sensor is in his house tracking his electricity and temperature usage. Full access to the system enables Oliver to input data such as his target bill. When using the system Oliver will be able to view: 
•	The average temperature of his house.
•	The temperature of every room in his house. 
•	The total costs so far today.
•	Graphs that show his average daily usage of electricity.

A secondary user on the system will be Oliver’s son James. James does not have full access to the system, he has a limited view of the data that is produced from Oliver’s use of the system. For example, James will only be able to view the average temperature of Oliver’s house and a graph of the average electricity usage throughout Oliver’s house. James will also receive notifications when his father (Oliver) goes over the average daily usage he has set. 
Functionality and interrogation of data in Homesafe
The functionality and interrogation of data in the primary users view of Homesafe.
As stated previously, Oliver is the primary user of the Homesafe system and has full access. 
 
Fig.1 Homesafe Create Account Page.
In figure 1 above we can see the create an account page. This is a functional requirement of the system as it allows users to create an account to log in to view their data and begin tracking their electricity and temperature usage. The data the user must input in this section is shown above in figure 1. We have decided to use placeholders in this section to make it easier for users such as Oliver or his son James to understand what type of data the system is asking/hinting for them to input.
Fig.2 Homesafe Login Page.
Figure 2 shows the login page that prompts users to enter a username and password. This is essential to the system as there are different levels of accessibility in regard to viewing the primary users data. 












Fig.3 Primary user (Oliver’s) dashboard. 
In figure 3 above is the primary user’s dashboard. This is what the primary user sees when they first log into the system. From the dashboard the user is able to see they are on target with their target bill, this is shown by the use of an emoji. The functionality of the emoji is so the user is able to see at a glance they are on target, as our primary user (Oliver) is 80 years old and has a poor technical knowledge we wanted the information on the system to be minimal and easy to understand. 












Fig.4 Primary user (Oliver) Electricity Usage.
In figure 4 we can see the electricity usage page this part of the website does not require any data to be entered by the user. The purpose of this page is to display the average electricity usage in the primary user (Oliver’s) house and show him that he is on target, as previously stated Oliver has a poor technical background and the emoji shows that he is on target as it is a smiling face. If the emoji was an angry face it means that Oliver is over his target bill. 

Fig.5 Primary User (Oliver) Temperature Analysis.
As information provided in the primary users view of the system is to be kept minimal the temperature analysis page shows the temperature in each room of the primary user’s house and what temperature it is as shown above in figure 5. Depending on how hot or cold the room is, the bubbles that display the temperature will be either blue for cold, light red for an average temperature and red for hot. This makes it easy for users such as Oliver to interpret the temperature analysis of each room and the average temperature of his house. The data needed for this analysis will have been set in the user’s settings page. 
Fig.6 Primary User (Oliver) Running Bill.
The target set can be edited by the user and they can input a different target for each day. The electricity usage is also shown in figure 6 in a bar chart displaying the electricity usage for each day of the week, the primary user is then able to view their electricity usage for previous weeks and compare the usage between the weeks that were tracked. 
The functionality and interrogation of data in the secondary users view of Homesafe.
The secondary user (James Oliver’s son) has a limited view of the system and is unable to input any data in regards to electricity usage and temperature, he can input data when he is creating an account on the Create Account Page shown in figure 1 and logging into the system which is shown the in Homesafe Login Page in figure 2. 











Fig.7 Secondary User (James) Notification Page.
The purpose of having a secondary user on the Homesafe system was for James to be able to receive notifications of when Oliver was exceeding his average usage due to living far away from his father and dur to worrying about his father keeping warm and not putting himself in danger due to being recently widowed. In figure 7 we can see the notification which states, “Oliver has gone over budget by £10.00. Average usage exceeds by 30 units”. This is an example of how the secondary user would be notified of the primary user’s status on the system.











Fig.8 Secondary Users (James) Average Temperature Page.
A functional requirement for the secondary user was to be able to view the average temperature and the average electricity usage of the primary user. Due to data protection, the secondary user cannot have the same level of access to the system as the primary user. The restrictions in access for the secondary user are shown in figure 8 and figure 9.
 










Fig.9 Secondary User (James) Average Electricity Usage Page.
Testing:
Use Case Development:
Before the system is developed, we create use cases. Use case development shows how different people can interact with the system, the behaviours of the system and basic flow of what the system should do. 
Homesafe has a primary user (Oliver) and a secondary user (James) of the system. A primary user initiates the use of a system whereas the secondary user acts as a reactionary to how the primary user interacts with the system. Figure 10 below shows how the primary and secondary user interacts with Homesafe.
 
Fig.10 Use Case Development Homesafe
 
Another type of testing we are using to test Homesafe is functional testing. Functional testing helps identify what functions the software is supposed to do by identifying the functional requirements of the system then testing the system accordingly. This is done through testing data input and entry, the execution of the test code and analysing the results of the tests. When testing Homesafe we are also going to use integration testing. This will ensure all interactions between the web server we are using which is Aws and the application server interface we are creating which is a Homesafe website, are running smoothly. When we are creating the Homesafe website we are expecting our users to run it on different devices such as a laptop, mobile phone and tablet, therefore we are going to use applications testing as well. We are going to use black box testing and white box testing methods to achieve this. 



<<<<<<<< Roisin >>>>>>>>
Data, Data Storage and Data Processing
This is looking at what data we will be collecting for our IoT Application, how that data will be stored and then how that data will be processed and displayed.
The sensors we are using to collect the data include a Temperature Sensors and an Electricity Sensor as referenced in the Hardware section. As we will only be collecting data related to the temperature of the house and data related to the Electricity of the house, it is important that we use good sensors to achieve this.

Data
In relation to our IoT Application we are going to be collecting the temperature data in Degrees Celsius and the electricity data in AMPS and convert to KW. 

Temperature Sensor
We will be using two temperature sensors to record the temperature of the house and rooms. The two temperature sensors we are going to be using include the following:
•	DHT11 basic temperature-humidity sensor.
•	ESP8266-DEVKITC-02D-F temperature sensor.
The DHT11 temperature sensor is a basic temperature sensor that we will be using to help collect the temperature readings of rooms. In order for this sensor to work it will be connected to the breadboard, which will then be connected to the raspberry pi to provide it power. Male to Male and Male to Female jumpier wires will also be needed to connect everything together. The raspberry pi will contain a sensors.py file that will run a line of code to collect the temperature every 2 minutes for this sensor, as it records the temperature every 2 minutes. 
The data recorded by this basic temperature sensor will be gathered using cron job commands in our sensors.py file that will be located on the pi itself. This will show how the data collected will be processed and how often the data will be collected. In our case this will be every 2 minutes for this sensor. 
The temperature data recorded will be stored in the temp_usage collection in the mongoDB every hour.
Figure 0.1 DHT11 Temperature Sensor (The PiHut 2020).

The ESP8266-DEVKITC-02D-F temperature sensor is a more updated sensor. This sensor will be connected to the raspberry pi over Wi-Fi. It will need a power source and it contains a temperature reading prob which connects to the base of the sensor. It will collect the temperature readings by being placed on a wall connected to a power source. It will send the data back over to the raspberry pi via Wi-Fi.
The data recorded by this temperature sensor will be gathered using cron job commands in our sensors.py file that will be located on the pi itself. This will show how the data collected will be processed and how often the data will be collected. The temperature will be recorded every hour with this sensor compared to the basic sensor. 
The temperature data recorded will be stored in the temp_usage collection in the mongoDB every hour.

Electricity Sensor
The electricity sensor that we are going to be using is:
•	Gravity Analog AC Current Sensor (with Analog Board Module) and an Analog to Digital converter (16bit 4-Channel).
The electricity sensor that we are using will be able to connect to the mains within a household by rapping itself around the main wire. The Analog board will need to be connected to an Analog to Digital converter in order for the Raspberry Pi to pick up on the data being recorded. The sensor will be recording the electricity in amps. The sensor is an 20amps sensor. As we will be using units per kw to display the electricity back out to the user, we will need to convert the amps recorded to kw to display the total units used. In order to convert the amps recorded to kw, we will use Ohm’s Law to do this calculation. 
Once the electricity data has been recorded and converted to kw, it will be stored in the electricity_usage collection in the mongoDB.
The data recorded by the electricity sensor connected to the raspberry pi will be gathered using cron job commands in our sensors.py file that will be located on the pi itself. This will show how the data collected will be processed and how often the data will be collected. In our case this will be every 15 minutes. 

We will be using PuTTY to write to the raspberry pi’s to configure the cron jobs in the sensors.py files. This way once the jobs have been written and tested, they will continue to work once we discontent from PuTTY.
